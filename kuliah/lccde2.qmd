
---
title: "Pemodelan Sistem LTI dengan Persamaan Diferensial Koefisien Konstan (LCCDE)"
author: "Departemen Teknik Elektro"
date: "today"
format:
  html:
    theme: cosmo
    code-fold: true
    toc: true
    toc-location: left
jupyter: python3
---

## Pendahuluan: Dari Sistem Fisik ke Model Matematis

Dalam studi Sinyal dan Sistem, salah satu tujuan utamanya adalah untuk memahami dan memprediksi perilaku sistem-sistem fisik. Sistem-sistem ini, baik berupa rangkaian listrik, sistem mekanik, maupun proses termal, pada dasarnya diatur oleh hukum-hukum fisika fundamental. Kemampuan kita untuk menganalisis dan merancang sistem-sistem tersebut bergantung pada kemampuan kita untuk menerjemahkan hukum-hukum fisika ini ke dalam bahasa matematika yang presisi. Persamaan diferensial, khususnya *Linear Constant-Coefficient Differential Equations* (LCCDE), berfungsi sebagai "bahasa universal" yang memungkinkan penerjemahan ini. LCCDE menyediakan kerangka kerja yang kuat untuk memodelkan hubungan antara sinyal masukan (input) dan sinyal keluaran (output) dari sebuah kelas sistem yang sangat luas dan penting.[1]

Sebuah sistem waktu-kontinu yang dapat direpresentasikan oleh LCCDE memiliki bentuk matematis umum sebagai berikut [1, 2]:

$$\sum_{k=0}^{N} a_k \frac{d^k y(t)}{dt^k} = \sum_{m=0}^{M} b_m \frac{d^m x(t)}{dt^m}$$

Di sini, $y(t)$ adalah sinyal output sistem, dan $x(t)$ adalah sinyal input. Koefisien $a_k$ dan $b_m$ adalah konstanta yang mendefinisikan karakteristik fisik dari sistem tersebut. Persamaan ini disebut *Linear* karena $y(t)$, $x(t)$, dan turunannya muncul secara linear. Persamaan ini disebut *Constant-Coefficient* karena nilai $a_k$ dan $b_m$ tidak berubah seiring waktu. Dua asumsi ini—linearitas dan koefisien konstan—sangatlah fundamental. Asumsi-asumsi ini menyiratkan bahwa sistem yang dimodelkan adalah *Linear Time-Invariant* (LTI), sebuah properti yang secara drastis menyederhanakan analisis dan memungkinkan kita untuk menggunakan perangkat matematika yang mapan seperti aljabar linear dan transformasi Laplace.[3] Tanpa asumsi LTI, analisis sistem menjadi jauh lebih rumit dan seringkali memerlukan metode numerik yang kompleks.

### Solusi Lengkap: Respon Alami dan Respon Paksa

Solusi total, $y(t)$, dari sebuah LCCDE selalu dapat diuraikan menjadi dua komponen yang berbeda secara konseptual dan fisis.[2, 4, 5] Pemisahan ini bukan sekadar trik matematika, melainkan manifestasi dari prinsip superposisi yang berlaku pada sistem linear. Ini memungkinkan kita untuk menganalisis efek dari kondisi internal sistem dan efek dari stimulus eksternal secara terpisah, lalu menjumlahkan hasilnya untuk mendapatkan respons total.

1.  **Solusi Homogen ($y_h(t)$) atau Respon Alami**: Komponen ini adalah solusi dari persamaan diferensial ketika inputnya nol ($x(t) = 0$). Respon alami merepresentasikan perilaku intrinsik sistem—bagaimana sistem melepaskan atau mendisipasikan energi yang tersimpan di dalamnya tanpa adanya gaya eksternal. Perilaku ini sepenuhnya ditentukan oleh karakteristik internal sistem, yang direpresentasikan oleh koefisien $a_k$ (misalnya, nilai resistor, induktor, dan kapasitor dalam sebuah rangkaian).[2, 6] Respon alami ini seringkali bersifat transien, artinya ia akan meluruh menuju nol seiring berjalannya waktu pada sistem yang stabil.

2.  **Solusi Partikular ($y_p(t)$) atau Respon Paksa**: Komponen ini adalah solusi spesifik yang memenuhi persamaan diferensial untuk input $x(t)$ yang diberikan. Respon paksa menggambarkan bagaimana sistem berperilaku di bawah pengaruh input eksternal setelah semua efek transien (respon alami) telah mereda. Bentuk dari respon paksa sangat bergantung pada bentuk sinyal input $x(t)$.[2, 7]

Dengan demikian, solusi lengkap dari sistem adalah superposisi dari kedua respons ini:

$$y(t) = y_h(t) + y_p(t)$$

Pemisahan ini memberikan intuisi rekayasa yang sangat kuat. Kita dapat menganalisis stabilitas internal sistem dengan memeriksa respon alaminya, dan secara terpisah, menganalisis kinerja *steady-state* sistem terhadap berbagai input dengan memeriksa respon paksa.

### Kondisi Awal dan Sifat LTI

Sebuah LCCDE saja tidak cukup untuk mendefinisikan sebuah sistem LTI secara unik. Kita juga memerlukan informasi tambahan berupa kondisi awal. Untuk memastikan bahwa sistem yang dimodelkan oleh LCCDE benar-benar bersifat LTI dan kausal, kita memberlakukan **kondisi awal diam** (*initial rest condition*).[8, 9] Kondisi ini menyatakan bahwa jika input ke sistem adalah nol untuk semua waktu sebelum $t_0$ (yaitu, $x(t) = 0$ untuk $t < t_0$), maka output sistem juga harus nol untuk semua waktu sebelum $t_0$ (yaitu, $y(t) = 0$ untuk $t < t_0$).[10] Secara fisis, ini berarti sistem tidak memiliki energi yang tersimpan sebelum input diterapkan. Dengan pemberlakuan kondisi ini, LCCDE secara unik mendefinisikan sebuah sistem LTI yang kausal.[8]

## Analisis Sistem Orde Pertama: Rangkaian RC

Untuk memahami bagaimana LCCDE memodelkan sistem LTI dalam praktik, kita akan memulai dengan contoh yang paling fundamental: sistem orde pertama. Sistem orde pertama dicirikan oleh persamaan diferensial yang turunan tertingginya adalah turunan pertama. Contoh kanonis yang paling intuitif dan sering dijumpai dalam rekayasa elektro adalah rangkaian Resistor-Kapasitor (RC).[6, 11, 12]

### Studi Kasus: Rangkaian RC sebagai Prototipe Sistem Orde Pertama

Perhatikan rangkaian RC seri sederhana yang ditunjukkan di bawah ini. Sistem ini memiliki satu elemen penyimpan energi, yaitu kapasitor. Input sistem adalah sumber tegangan $v_s(t)$, dan output yang kita amati adalah tegangan pada kapasitor, $v_c(t)$.

```{python}
#| echo: false
#| fig-cap: "Rangkaian RC Seri sebagai Sistem LTI Orde Pertama"
import matplotlib.pyplot as plt
import schemdraw
import schemdraw.elements as elm

with schemdraw.Drawing() as d:
    d.config(unit=1)
    d += (vs := elm.SourceV().label('$v_s(t)$').up())
    d += elm.Resistor().right().label('R')
    d += elm.Capacitor().down().label('C')
    d += elm.Line().left().to(vs.start)
    d += elm.Ground(at=vs.start)
    d.push()
    d += elm.Line().right().at(d.here)
    d.pop()
    d += elm.Gap().toy(vs.end).label(['+','$v_c(t)$','-'])
````

#### Penurunan Model Matematis dari Prinsip Dasar

Kita dapat menurunkan model matematis untuk rangkaian ini langsung dari hukum-hukum dasar rangkaian listrik. Dengan menggunakan Hukum Tegangan Kirchhoff (KVL) pada loop, kita tahu bahwa jumlah tegangan dalam satu loop tertutup adalah nol, atau tegangan sumber sama dengan jumlah penurunan tegangan pada setiap komponen.[13, 14]

$$v_R(t) + v_c(t) = v_s(t)$$

Selanjutnya, kita gunakan hubungan arus-tegangan (hukum konstitutif) untuk setiap komponen:

1.  Untuk resistor, hukum Ohm menyatakan: $v\_R(t) = R \\cdot i(t)$.
2.  Untuk kapasitor, arus yang mengalir sebanding dengan laju perubahan tegangan: $i(t) = C \\frac{dv\_c(t)}{dt}$.[15, 16]

Dengan mensubstitusikan $v\_R(t)$ menggunakan hukum Ohm, persamaan KVL menjadi:

$$R \cdot i(t) + v_c(t) = v_s(t)$$

Kemudian, kita substitusikan ekspresi untuk arus $i(t)$ dari persamaan kapasitor ke dalam persamaan KVL di atas. Langkah ini penting karena memungkinkan kita untuk menyatakan seluruh persamaan hanya dalam satu variabel tak diketahui, yaitu $v\_c(t)$.

$$R \left( C \frac{dv_c(t)}{dt} \right) + v_c(t) = v_s(t)$$

Dengan menata ulang, kita mendapatkan LCCDE orde pertama yang memodelkan rangkaian RC [6, 7]:

$$RC \frac{dv_c(t)}{dt} + v_c(t) = v_s(t)$$

Persamaan ini secara sempurna menggambarkan hubungan dinamis antara input $v\_s(t)$ dan output $v\_c(t)$.

#### Menemukan Solusi Lengkap untuk Respon Undak (Step Response)

Sekarang, mari kita selesaikan persamaan ini untuk menemukan bagaimana sistem merespons input yang paling umum, yaitu fungsi undak (step function), di mana tegangan sumber tiba-tiba berubah dari 0 ke nilai konstan $V\_s$ pada $t=0$. Jadi, $v\_s(t) = V\_s u(t)$. Kita akan menggunakan kondisi awal diam, yaitu $v\_c(0) = 0$.

**1. Solusi Homogen (Respon Alami)**

Pertama, kita cari solusi homogen dengan mengatur input menjadi nol: $v\_s(t) = 0$.

$$RC \frac{dv_{ch}(t)}{dt} + v_{ch}(t) = 0$$

Kita asumsikan solusi berbentuk eksponensial, $v\_{ch}(t) = A e^{st}$, yang merupakan bentuk umum respon alami untuk sistem LTI.[6] Substitusi ke dalam persamaan homogen memberikan:

$$RC (A s e^{st}) + A e^{st} = 0$$

$$A e^{st} (RCs + 1) = 0$$

Karena $A e^{st}$ tidak bisa selalu nol (kecuali untuk solusi trivial), maka kita harus memiliki:

$$RCs + 1 = 0$$

Ini adalah **persamaan karakteristik** dari sistem. Akarnya, yang disebut juga sebagai *pole* sistem, adalah $s = -\\frac{1}{RC}$. Posisi *pole* ini, yang selalu merupakan bilangan riil negatif, secara fundamental menentukan bahwa sistem orde pertama tidak dapat berosilasi dalam respon alaminya; perilakunya adalah peluruhan eksponensial murni. Solusi homogennya adalah:

$$v_{ch}(t) = A e^{-t/RC}$$

Besaran $RC$ memiliki satuan waktu dan disebut **konstanta waktu** sistem, dilambangkan dengan $\\tau$. Konstanta ini menentukan seberapa cepat respon alami sistem meluruh ke nol.[6, 16]

**2. Solusi Partikular (Respon Paksa)**

Selanjutnya, kita cari solusi partikular untuk input $v\_s(t) = V\_s$ untuk $t \> 0$. Karena input adalah konstan, kita dapat berasumsi bahwa setelah waktu yang sangat lama (*steady state*), output juga akan menjadi konstan, $v\_{cp}(t) = K$.[7, 17] Turunan dari konstanta adalah nol, sehingga saat kita substitusikan ke LCCDE:

$$RC \frac{d(K)}{dt} + K = V_s \implies 0 + K = V_s$$

Jadi, solusi partikularnya adalah $v\_{cp}(t) = V\_s$. Ini secara fisis berarti bahwa setelah waktu yang lama, kapasitor akan terisi penuh dan tegangannya akan sama dengan tegangan sumber.

**3. Solusi Total dan Kondisi Awal**

Solusi total adalah jumlah dari solusi homogen dan partikular:

$$v_c(t) = v_{ch}(t) + v_{cp}(t) = A e^{-t/RC} + V_s$$

Sekarang kita gunakan kondisi awal diam, $v\_c(0) = 0$, untuk menentukan konstanta $A$:

$$v_c(0) = A e^0 + V_s = A + V_s = 0 \implies A = -V_s$$

Dengan mensubstitusikan nilai $A$, kita mendapatkan solusi akhir untuk respon undak dari rangkaian RC [7, 17, 18]:

$$v_c(t) = V_s(1 - e^{-t/RC}) u(t)$$

#### Simulasi dan Visualisasi dengan Sympy

Proses analitis di atas dapat diverifikasi dan divisualisasikan dengan mudah menggunakan pustaka `Sympy` di Python. `Sympy` memungkinkan kita untuk melakukan komputasi simbolis, termasuk menyelesaikan persamaan diferensial. Penggunaan `dsolve` dengan `ics` di Sympy bukan hanya sekadar kalkulasi, tetapi meniru proses analitis lengkap—menemukan solusi umum dan kemudian menerapkan kondisi batas—dalam satu langkah. Ini menjadikannya alat verifikasi yang sangat kuat. Mahasiswa dapat terlebih dahulu menyelesaikan masalah secara manual, kemudian menggunakan Sympy untuk mengkonfirmasi bahwa solusi simbolis mereka benar sebelum melanjutkan ke analisis numerik atau plot.

Berikut adalah kode Quarto yang mendefinisikan, menyelesaikan, dan mem-plot LCCDE untuk rangkaian RC.

```{.python}
#| label: fig-rc-step-response
#| fig-cap: "Respon Undak (Step Response) Rangkaian RC dengan R=1 kΩ, C=1 mF, dan Vs=5 V"

import sympy as sym
import numpy as np
import matplotlib.pyplot as plt

# Inisialisasi untuk plotting yang lebih baik di lingkungan notebook
sym.init_printing()

# 1. Definisi Simbol dan Fungsi
t, R, C, Vs = sym.symbols('t R C Vs', real=True, positive=True)
vc = sym.Function('vc')

# 2. Penyusunan Persamaan Diferensial
# RC * d(vc(t))/dt + vc(t) = Vs
ode = sym.Eq(R * C * vc(t).diff(t) + vc(t), Vs)

# Tampilkan persamaan dalam format LaTeX
print("Persamaan Diferensial (LCCDE):")
display(ode)

# 3. Penyelesaian Simbolis dengan Kondisi Awal
# Gunakan dsolve dengan initial condition vc(0) = 0
solution = sym.dsolve(ode, vc(t), ics={vc(0): 0})

print("\nSolusi Simbolis untuk vc(t):")
display(solution)

# 4. Substitusi Nilai Numerik dan Plotting
# Berikan nilai numerik untuk R, C, dan Vs
# R = 1 kOhm, C = 1 mF -> tau = RC = 1 detik
# Vs = 5 Volt
sol_numeric = solution.rhs.subs({R: 1000, C: 0.001, Vs: 5})

print("\nSolusi Numerik untuk vc(t):")
display(sym.Eq(vc(t), sol_numeric))

# Plot solusi menggunakan sympy.plot
# Rentang waktu dari 0 hingga 5 kali konstanta waktu (5*tau)
p = sym.plot(sol_numeric, (t, 0, 5),
             xlabel='Waktu (detik)',
             ylabel='Tegangan Kapasitor vc(t) (Volt)',
             title='Kurva Pengisian Kapasitor (Respon Undak)',
             show=False)

# Mengambil data dari plot untuk kustomisasi dengan matplotlib
plot_data = p.get_points()
x_vals = plot_data
y_vals = plot_data[19]

# Kustomisasi plot dengan Matplotlib untuk menambahkan anotasi
plt.figure(figsize=(10, 6))
plt.plot(x_vals, y_vals, label='Respon vc(t)')
tau = 1.0 # RC = 1000 * 0.001 = 1
plt.axhline(y=5, color='r', linestyle='--', label='Tegangan Steady-State (Vs = 5V)')
plt.axvline(x=tau, color='g', linestyle='--', label=f'1 Tau ({tau}s)')
val_at_tau = 5 * (1 - np.exp(-1))
plt.plot(tau, val_at_tau, 'go')
plt.text(tau + 0.1, val_at_tau, f'{val_at_tau:.2f}V (63.2% dari Vs)')

plt.grid(True)
plt.legend()
plt.xlabel('Waktu (detik)')
plt.ylabel('Tegangan Kapasitor vc(t) (Volt)')
plt.title('Kurva Pengisian Kapasitor (Respon Undak)')
plt.show()

```

Plot di atas secara visual mengkonfirmasi hasil analitis kita. Kurva menunjukkan tegangan kapasitor yang naik secara eksponensial dari 0 V menuju nilai *steady-state* 5 V. Garis putus-putus hijau menandai satu konstanta waktu ($\\tau = 1$ detik), di mana tegangan telah mencapai sekitar 63.2% dari nilai akhirnya, sebuah karakteristik khas dari sistem orde pertama.

## Analisis Sistem Orde Tinggi: Rangkaian RLC

Setelah memahami sistem orde pertama, langkah selanjutnya adalah menganalisis sistem orde tinggi. Sistem orde kedua adalah yang paling umum dan fundamental, karena mereka dapat menunjukkan perilaku dinamis yang jauh lebih kompleks, termasuk osilasi. Kehadiran dua elemen penyimpan energi yang independen, seperti induktor dan kapasitor dalam satu rangkaian, secara alami mengarah pada model persamaan diferensial orde kedua.[20, 21]

### Studi Kasus: Rangkaian RLC sebagai Model Sistem Orde Kedua

Kita akan menggunakan rangkaian RLC seri sebagai contoh utama. Rangkaian ini terdiri dari sebuah resistor (R), sebuah induktor (L), dan sebuah kapasitor (C) yang dihubungkan secara seri dengan sumber tegangan $v\_s(t)$. Output yang akan kita analisis adalah tegangan pada kapasitor, $v\_c(t)$.

```{python}
#| echo: false
#| fig-cap: "Rangkaian RLC Seri sebagai Sistem LTI Orde Kedua"
import schemdraw
import schemdraw.elements as elm

with schemdraw.Drawing() as d:
    d.config(unit=1)
    d += (vs := elm.SourceV().label('$v_s(t)$').up())
    d += elm.Resistor().right().label('R')
    d += elm.Inductor().right().label('L')
    d += elm.Capacitor().down().label('C')
    d += elm.Line().left().to(vs.start)
    d += elm.Ground(at=vs.start)
    d.push()
    d += elm.Line().right().at(d.here)
    d.pop()
    d += elm.Gap().toy(vs.end).label(['+','$v_c(t)$','-'])
```

#### Penurunan LCCDE Orde Kedua

Sama seperti pada kasus rangkaian RC, kita mulai dengan menerapkan KVL pada loop seri [20]:

$$v_R(t) + v_L(t) + v_c(t) = v_s(t)$$

Kemudian, kita substitusikan hubungan arus-tegangan untuk setiap komponen:

  * Resistor: $v\_R(t) = R \\cdot i(t)$
  * Induktor: $v\_L(t) = L \\frac{di(t)}{dt}$
  * Kapasitor: $i(t) = C \\frac{dv\_c(t)}{dt}$

Substitusi ini menghasilkan:

$$R \cdot i(t) + L \frac{di(t)}{dt} + v_c(t) = v_s(t)$$

Tujuan kita adalah mendapatkan satu persamaan diferensial hanya dalam variabel $v\_c(t)$. Untuk itu, kita substitusikan $i(t) = C \\frac{dv\_c(t)}{dt}$ dan turunannya, $\\frac{di(t)}{dt} = C \\frac{d^2v\_c(t)}{dt^2}$, ke dalam persamaan KVL:

$$R \left( C \frac{dv_c(t)}{dt} \right) + L \left( C \frac{d^2v_c(t)}{dt^2} \right) + v_c(t) = v_s(t)$$

Dengan menata ulang suku-sukunya berdasarkan orde turunan, kita mendapatkan LCCDE orde kedua yang memodelkan rangkaian RLC seri [20, 22, 23]:

$$LC \frac{d^2v_c(t)}{dt^2} + RC \frac{dv_c(t)}{dt} + v_c(t) = v_s(t)$$

### Persamaan Karakteristik: Jantung dari Respon Sistem

Untuk memahami respon alami (transien) dari sistem ini, kita analisis persamaan homogennya (dengan $v\_s(t) = 0$):

$$LC \frac{d^2v_{ch}(t)}{dt^2} + RC \frac{dv_{ch}(t)}{dt} + v_{ch}(t) = 0$$

Dengan mengasumsikan solusi berbentuk $v\_{ch}(t) = A e^{st}$, kita mendapatkan **persamaan karakteristik** [20, 24]:

$$LCs^2 + RCs + 1 = 0$$

Bentuk dan perilaku solusi homogen sepenuhnya ditentukan oleh akar-akar dari persamaan kuadratik ini. Untuk memfasilitasi analisis, kita sering menormalisasi persamaan ini dengan membaginya dengan $LC$:

$$s^2 + \frac{R}{L}s + \frac{1}{LC} = 0$$

Dari sini, kita mendefinisikan dua parameter kunci yang mengontrol perilaku sistem orde kedua:

1.  **Frekuensi Natural Tak Teredam ($\\omega\_n$)**: $\\omega\_n = \\frac{1}{\\sqrt{LC}}$. Ini adalah frekuensi osilasi sistem jika tidak ada redaman sama sekali (yaitu, jika $R=0$).[25, 26]
2.  **Rasio Redaman ($\\zeta$, zeta)**: $\\zeta = \\frac{R}{2} \\sqrt{\\frac{C}{L}} = \\frac{R}{2L\\omega\_n}$. Ini adalah parameter tanpa dimensi yang mengukur tingkat redaman dalam sistem relatif terhadap jumlah redaman yang dibutuhkan untuk mencegah osilasi.[25, 26]

Dengan parameter ini, persamaan karakteristik dapat ditulis dalam bentuk standar yang sangat informatif:

$$s^2 + 2\zeta\omega_n s + \omega_n^2 = 0$$

Akar-akar dari persamaan ini, yang dapat ditemukan menggunakan rumus kuadrat, adalah:

$$s_{1,2} = -\zeta\omega_n \pm \omega_n \sqrt{\zeta^2 - 1}$$

Sifat dari akar-akar ini—apakah mereka riil, kembar, atau kompleks—bergantung sepenuhnya pada nilai $\\zeta$, yang pada gilirannya ditentukan oleh nilai-nilai fisik R, L, dan C.

### Tiga Jenis Respon Natural

Kemunculan osilasi dalam sistem orde kedua adalah properti *emergent* yang tidak ada dalam sistem orde pertama. Fenomena ini secara matematis disebabkan oleh akar persamaan karakteristik yang "lepas" dari sumbu riil dan masuk ke bidang kompleks. Secara fisis, ini merepresentasikan pertukaran energi bolak-balik antara dua elemen penyimpan energi (induktor dan kapasitor), sementara resistor membuang energi tersebut dari sistem.[27, 28] Rasio redaman $\\zeta$ adalah parameter tunggal yang mengontrol keseimbangan antara pertukaran energi (osilasi) dan disipasi energi (redaman). Berdasarkan nilai $\\zeta$, ada tiga kategori perilaku respon alami yang berbeda.

#### 1\. Respon *Overdamped* (Redaman Berlebih, $\\zeta \> 1$)

  * **Kondisi Matematis**: Ketika $\\zeta \> 1$, diskriminan $(\\zeta^2 - 1)$ positif. Ini menghasilkan dua akar yang **riil, berbeda, dan negatif**.[24, 29]
  * **Bentuk Solusi**: $v\_{ch}(t) = A\_1 e^{s\_1 t} + A\_2 e^{s\_2 t}$. Solusinya adalah jumlah dari dua fungsi eksponensial yang meluruh.
  * **Perilaku Fisis**: Sistem kembali ke kondisi setimbang (ekuilibrium) secara perlahan tanpa pernah berosilasi. Responnya "lamban". Ini terjadi ketika resistansi (redaman) dalam rangkaian sangat besar.[30, 31] Bayangkan sebuah pintu berat dengan penutup hidrolik yang sangat kuat; pintu itu akan menutup perlahan tanpa terbanting.

#### 2\. Respon *Critically Damped* (Redaman Kritis, $\\zeta = 1$)

  * **Kondisi Matematis**: Ketika $\\zeta = 1$, diskriminan adalah nol. Ini menghasilkan dua akar yang **riil dan identik (akar kembar)**: $s\_1 = s\_2 = -\\omega\_n$.[24, 29]
  * **Bentuk Solusi**: $v\_{ch}(t) = (A\_1 + A\_2 t) e^{-\\omega\_n t}$. Adanya suku $t$ diperlukan karena akarnya kembar.
  * **Perilaku Fisis**: Sistem kembali ke ekuilibrium secepat mungkin tanpa mengalami osilasi. Ini adalah transisi tercepat menuju kondisi *steady-state* tanpa *overshoot*. Kondisi ini seringkali menjadi target desain yang ideal dalam banyak sistem kontrol dan mekanik, di mana respons cepat diinginkan tetapi *overshoot* dapat merusak atau tidak efisien.[24, 30, 31]

#### 3\. Respon *Underdamped* (Redaman Kurang, $0 \< \\zeta \< 1$)

  * **Kondisi Matematis**: Ketika $0 \< \\zeta \< 1$, diskriminan negatif. Ini menghasilkan sepasang **akar kompleks konjugat**: $s\_{1,2} = -\\zeta\\omega\_n \\pm j\\omega\_n \\sqrt{1 - \\zeta^2}$.
  * **Bentuk Solusi**: Solusinya dapat ditulis sebagai $v\_{ch}(t) = e^{-\\zeta\\omega\_n t} (A\_1 \\cos(\\omega\_d t) + A\_2 \\sin(\\omega\_d t))$, di mana $\\alpha = \\zeta\\omega\_n$ adalah faktor peluruhan eksponensial dan $\\omega\_d = \\omega\_n \\sqrt{1 - \\zeta^2}$ adalah **frekuensi natural teredam**.[24, 29]
  * **Perilaku Fisis**: Sistem berosilasi pada frekuensi $\\omega\_d$ saat kembali ke ekuilibrium. Amplitudo osilasi ini meluruh secara eksponensial, dibatasi oleh selubung (envelope) $e^{-\\alpha t}$. Ini terjadi ketika redaman dalam sistem relatif kecil. Contoh klasiknya adalah lonceng yang dipukul, yang bergetar dan suaranya perlahan meredup.[29, 32]

Tabel berikut merangkum ketiga kasus ini, memberikan gambaran yang jelas tentang hubungan antara parameter matematika dan perilaku fisis sistem.

| Kondisi Redaman | Nilai Rasio Redaman ($\\zeta$) | Sifat Akar Persamaan Karakteristik | Bentuk Respon Alami $y\_h(t)$ | Deskripsi Perilaku Fisis |
| :--- | :--- | :--- | :--- | :--- |
| *Overdamped* | $\\zeta \> 1$ | Dua akar riil, berbeda, negatif | $A e^{s\_1 t} + B e^{s\_2 t}$ | Lambat, kembali ke setimbang tanpa osilasi |
| *Critically Damped* | $\\zeta = 1$ | Dua akar riil, identik, negatif | $(A + Bt)e^{-\\omega\_n t}$ | Paling cepat kembali ke setimbang tanpa osilasi |
| *Underdamped* | $0 \< \\zeta \< 1$ | Sepasang akar kompleks konjugat | $e^{-\\alpha t}(A \\cos(\\omega\_d t) + B \\sin(\\omega\_d t))$| Berosilasi dengan amplitudo yang meluruh |

### Simulasi Komparatif dengan Sympy

Perbandingan visual dari ketiga jenis respons ini sangat membantu untuk membangun intuisi. Kita dapat menggunakan `Sympy` untuk menyelesaikan LCCDE orde kedua untuk tiga set nilai R yang berbeda (mewakili setiap kasus redaman) sambil menjaga L dan C tetap konstan, lalu memplot hasilnya pada grafik yang sama.

```{.python}
#| label: fig-rlc-responses
#| fig-cap: "Perbandingan Respon Alami Sistem RLC Orde Kedua untuk Tiga Kasus Redaman"

import sympy as sym
import numpy as np
import matplotlib.pyplot as plt

sym.init_printing()

# 1. Definisi Simbol dan Fungsi
t = sym.symbols('t', real=True)
L, C = sym.symbols('L C', real=True, positive=True)
R_od, R_cd, R_ud = sym.symbols('R_od R_cd R_ud', real=True, positive=True) # Resistor untuk setiap kasus
vc = sym.Function('vc')

# Parameter Rangkaian (L dan C tetap)
L_val = 1.0  # Henry
C_val = 0.25 # Farad

# Hitung omega_n dan R untuk redaman kritis
omega_n = 1 / np.sqrt(L_val * C_val)
R_crit = 2 * np.sqrt(L_val / C_val)

# Pilih nilai R untuk setiap kasus
R_overdamped = R_crit * 2.0   # zeta = 2.0
R_critically_damped = R_crit # zeta = 1.0
R_underdamped = R_crit * 0.5 # zeta = 0.5

params = {
    'Overdamped (ζ=2.0)': R_overdamped,
    'Critically Damped (ζ=1.0)': R_critically_damped,
    'Underdamped (ζ=0.5)': R_underdamped
}

# Kondisi Awal: Kapasitor awalnya terisi, tidak ada arus awal.
# vc(0) = 1V, i(0) = 0.
# Karena i(t) = C * d(vc)/dt, maka d(vc)/dt di t=0 adalah 0.
ics = {vc(0): 1, vc(t).diff(t).subs(t, 0): 0}

solutions = {}
# 2. Loop untuk Menyelesaikan Setiap Kasus
for name, R_val in params.items():
    # Persamaan diferensial homogen
    ode = sym.Eq(L_val * C_val * vc(t).diff(t, 2) + R_val * C_val * vc(t).diff(t) + vc(t), 0)
    
    # Selesaikan ODE
    sol = sym.dsolve(ode, vc(t), ics=ics)
    solutions[name] = sol.rhs
    
    print(f"Solusi untuk kasus {name}:")
    display(sym.Eq(vc(t), sol.rhs.simplify()))
    print("-" * 30)

# 3. Plotting
# Buat plot kosong
p = sym.plot(show=False, xlim=(0, 10), ylim=(-0.5, 1.5),
             xlabel='Waktu (detik)',
             ylabel='Tegangan Kapasitor vc(t) (Volt)',
             title='Perbandingan Respon Alami Sistem RLC')

colors = ['r', 'g', 'b']
# Tambahkan setiap solusi ke plot
for i, (name, sol_rhs) in enumerate(solutions.items()):
    p.extend(sym.plot(sol_rhs, (t, 0, 10), label=name, show=False, line_color=colors[i]))

p.legend = True
p.show()
```

Grafik di atas dengan jelas mengilustrasikan perbedaan dramatis dalam perilaku transien sistem orde kedua.

  - **Kurva Merah (*Overdamped*):** Menunjukkan peluruhan yang lambat dan mulus ke nol, tanpa melewati sumbu horizontal.
  - **Kurva Hijau (*Critically Damped*):** Menunjukkan peluruhan tercepat ke nol tanpa osilasi. Perhatikan bagaimana kurva ini "memeluk" sumbu nol lebih cepat daripada kurva *overdamped*.
  - **Kurva Biru (*Underdamped*):** Menunjukkan osilasi yang jelas. Amplitudo tegangan melampaui nol (menjadi negatif) dan berosilasi bolak-balik saat energinya secara bertahap didisipasikan oleh resistor.

## Kombinasi Sistem: Sistem Bertingkat (Cascade)

Dalam aplikasi rekayasa nyata, sistem yang kompleks seringkali dibangun dengan menghubungkan beberapa subsistem yang lebih sederhana secara berurutan. Konfigurasi ini, di mana output dari satu sistem menjadi input untuk sistem berikutnya, dikenal sebagai koneksi **bertingkat** atau **kaskade** (*cascade*).[33, 34] Kemampuan untuk menganalisis dan memodelkan kombinasi semacam ini sangat penting.

Secara konseptual, menghubungkan sistem LTI secara seri setara dengan melakukan operasi konvolusi pada respon impuls masing-masing sistem di domain waktu ($h(t) = h\_1(t) \* h\_2(t)$) atau mengalikan fungsi transfer mereka di domain frekuensi ($H(s) = H\_1(s) \\cdot H\_2(s)$).[33, 35] Di sini, kita akan fokus pada bagaimana menurunkan satu LCCDE tunggal yang merepresentasikan keseluruhan sistem kaskade dari LCCDE masing-masing subsistem.

### Menurunkan LCCDE Tunggal dari Sistem Cascade

Menghubungkan sistem LTI secara seri secara fundamental meningkatkan orde (dan kompleksitas) sistem secara keseluruhan. Mari kita tunjukkan ini dengan contoh konkret: dua sistem orde pertama yang dihubungkan secara kaskade.[36]

Misalkan kita memiliki dua sistem:

  - **Sistem 1**: Input $x(t)$, output $w(t)$. Dimodelkan oleh: $\\frac{dw(t)}{dt} + a \\cdot w(t) = b \\cdot x(t)$
  - **Sistem 2**: Input $w(t)$, output $y(t)$. Dimodelkan oleh: $\\frac{dy(t)}{dt} + c \\cdot y(t) = d \\cdot w(t)$

Tujuan kita adalah menemukan satu LCCDE yang secara langsung menghubungkan output akhir $y(t)$ dengan input awal $x(t)$, tanpa variabel perantara $w(t)$. Prosesnya adalah sebagai berikut:

1.  **Isolasi Variabel Perantara**: Dari persamaan Sistem 2, kita dapat mengekspresikan $w(t)$ dalam bentuk $y(t)$ dan turunannya:

    $$
    $$$$w(t) = \\frac{1}{d} \\left( \\frac{dy(t)}{dt} + c \\cdot y(t) \\right)

    $$
    $$$$
    $$
2.  **Diferensiasi**: Untuk mensubstitusikannya ke persamaan Sistem 1, kita juga memerlukan turunan dari $w(t)$:

    $$
    $$$$\\frac{dw(t)}{dt} = \\frac{1}{d} \\left( \\frac{d^2y(t)}{dt^2} + c \\frac{dy(t)}{dt} \\right)

    $$
    $$$$
    $$
3.  **Substitusi**: Sekarang, substitusikan ekspresi untuk $w(t)$ dan $\\frac{dw(t)}{dt}$ ke dalam persamaan Sistem 1:

    $$
    $$$$\\frac{1}{d} \\left( \\frac{d^2y(t)}{dt^2} + c \\frac{dy(t)}{dt} \\right) + a \\left( \\frac{1}{d} \\left( \\frac{dy(t)}{dt} + c \\cdot y(t) \\right) \\right) = b \\cdot x(t)

    $$
    $$$$
    $$
4.  **Penyederhanaan**: Kalikan seluruh persamaan dengan $d$ dan kelompokkan suku-suku berdasarkan orde turunan dari $y(t)$:

    $$
    $$$$\\frac{d^2y(t)}{dt^2} + c \\frac{dy(t)}{dt} + a \\frac{dy(t)}{dt} + ac \\cdot y(t) = bd \\cdot x(t)
    $$ $$
    \\frac{d^2y(t)}{dt^2} + (a+c) \\frac{dy(t)}{dt} + ac \\cdot y(t) = bd \\cdot x(t)

    $$
    $$$$
    $$Hasilnya adalah sebuah LCCDE orde kedua tunggal. Ini menunjukkan bahwa mengkombinasikan dua sistem orde pertama menghasilkan sebuah sistem orde kedua. Ini adalah contoh perilaku *emergent*: dua sistem yang secara individual tidak dapat berosilasi dapat, ketika digabungkan, menciptakan sistem orde kedua yang berpotensi *underdamped* dan mampu berosilasi.

Kemampuan untuk mereduksi sistem kaskade menjadi satu LCCDE tunggal adalah dasar dari analisis dan desain sistem modular. Ini memungkinkan seorang insinyur untuk menganalisis atau merancang subsistem (misalnya, filter, amplifier) secara terpisah dan kemudian secara matematis memprediksi bagaimana mereka akan berperilaku ketika dihubungkan bersama, menghemat waktu dan sumber daya yang sangat besar.

### Simulasi dan Analisis dengan Sympy

Proses aljabar di atas bisa menjadi rumit dan rentan kesalahan. `Sympy` dapat digunakan untuk mengotomatiskan derivasi ini dan kemudian menyelesaikan LCCDE yang dihasilkan.

```{.python}
#| label: fig-cascade-response
#| fig-cap: "Respon Undak dari Dua Sistem Orde Pertama yang Dikaskadekan"

import sympy as sym

sym.init_printing()

# 1. Definisi Simbol dan Fungsi
t = sym.symbols('t', real=True)
a, b, c, d = sym.symbols('a b c d', real=True, positive=True)
x = sym.Function('x')
w = sym.Function('w')
y = sym.Function('y')

# 2. Definisi LCCDE untuk setiap sistem
# Sistem 1: w'(t) + a*w(t) = b*x(t)
ode1 = sym.Eq(w(t).diff(t) + a*w(t), b*x(t))
# Sistem 2: y'(t) + c*y(t) = d*w(t)
ode2 = sym.Eq(y(t).diff(t) + c*y(t), d*w(t))

print("LCCDE Sistem 1:")
display(ode1)
print("\nLCCDE Sistem 2:")
display(ode2)

# 3. Derivasi Simbolis LCCDE Gabungan
# Selesaikan ode2 untuk w(t)
w_expr_sol = sym.solve(ode2, w(t))
w_expr = w_expr_sol

# Substitusikan w(t) dan turunannya ke dalam ode1
#.subs() akan menggantikan w(t)
#.doit() akan melakukan diferensiasi setelah substitusi
combined_ode = ode1.subs(w(t), w_expr).doit()

# Sederhanakan dan tata ulang persamaan
combined_ode_simplified = sym.expand(combined_ode)
print("\nLCCDE Gabungan (sebelum disederhanakan):")
display(combined_ode_simplified)

# Ganti x(t) dengan input undak, x(t) = 1 untuk t > 0
# Turunannya adalah 0
x_step = 1
combined_ode_step = combined_ode.subs(x(t), x_step).doit()

# 4. Selesaikan LCCDE Gabungan untuk Respon Undak
# Gunakan nilai numerik: a=2, b=1, c=3, d=1
# Persamaan menjadi: y'' + 5y' + 6y = 1
a_val, b_val, c_val, d_val = 2, 1, 3, 1
ode_numeric = combined_ode_step.subs({a: a_val, b: b_val, c: c_val, d: d_val})

print("\nLCCDE Gabungan Numerik untuk Input Undak:")
display(ode_numeric)

# Kondisi awal diam: y(0)=0.
# Untuk y'(0), kita tahu y'(0) = d*w(0) - c*y(0). Karena y(0)=0, maka y'(0) = d*w(0).
# Dari sistem 1, jika x(t) adalah undak dan w(0)=0, maka w'(0) = b*x(0) - a*w(0) = b.
# Namun, untuk sistem LTI kausal, kita asumsikan semua kondisi awal nol.
# y(0) = 0, y'(0) = 0
ics_cascade = {y(0): 0, y(t).diff(t).subs(t, 0): 0}
sol_cascade = sym.dsolve(ode_numeric, y(t), ics=ics_cascade)

print("\nSolusi Respon Undak untuk Sistem Kaskade:")
display(sol_cascade)

# 5. Plotting
p = sym.plot(sol_cascade.rhs, (t, 0, 5),
             xlabel='Waktu (detik)',
             ylabel='Output y(t)',
             title='Respon Undak Sistem Kaskade Orde Kedua',
             show=True)

```

Hasilnya adalah LCCDE orde kedua, seperti yang diharapkan. Solusi untuk respon undak menunjukkan perilaku yang khas dari sistem orde kedua (dalam kasus ini, *overdamped* karena akar dari $s^2+5s+6=0$ adalah $s=-2$ dan $s=-3$). Plotnya menunjukkan respons yang naik ke nilai *steady-state* tanpa osilasi, tetapi dengan kurva berbentuk 'S' yang lebih landai di awal, yang merupakan ciri khas sistem orde lebih tinggi dibandingkan dengan respons eksponensial murni dari sistem orde pertama.

## Rangkuman dan Poin Kunci

Catatan kuliah ini telah menjelajahi konsep fundamental pemodelan sistem LTI waktu-kontinu menggunakan Persamaan Diferensial Koefisien Konstan Linier (LCCDE). Melalui derivasi, analisis, dan simulasi, beberapa poin kunci telah ditekankan:

1.  **LCCDE sebagai Bahasa Universal**: LCCDE adalah alat matematis yang kuat dan fundamental untuk merepresentasikan berbagai macam sistem fisik di bawah asumsi linearitas dan time-invariance. Mereka menerjemahkan hukum-hukum fisika ke dalam kerangka kerja Sinyal dan Sistem yang terstandardisasi.

2.  **Orde Sistem Menentukan Kompleksitas**: Orde dari LCCDE, yang secara fisis seringkali sesuai dengan jumlah elemen penyimpan energi independen dalam sistem, menentukan kompleksitas perilaku dinamisnya. Sistem orde pertama hanya dapat menunjukkan peluruhan eksponensial, sementara sistem orde kedua dapat menunjukkan perilaku osilasi yang kompleks.

3.  **Akar Persamaan Karakteristik adalah Kunci**: Perilaku transien atau respon alami dari sebuah sistem LTI sepenuhnya ditentukan oleh akar-akar dari persamaan karakteristiknya. Posisi akar-akar ini di bidang kompleks—apakah mereka riil, kembar, atau kompleks konjugat—secara langsung mendikte apakah respons sistem akan meluruh secara monoton (*overdamped*), secepat mungkin tanpa osilasi (*critically damped*), atau berosilasi saat meluruh (*underdamped*).

4.  **Kaskade Meningkatkan Orde**: Menggabungkan sistem LTI secara seri (kaskade) akan menghasilkan sistem keseluruhan dengan orde yang merupakan jumlah dari orde masing-masing subsistem. Hal ini dapat menyebabkan munculnya perilaku dinamis baru yang tidak ada pada subsistem individual.

5.  **Sympy sebagai Alat Bantu Analisis**: Pustaka `Sympy` di Python terbukti bukan hanya sebagai "kalkulator" untuk menyelesaikan persamaan. Ia adalah alat yang sangat kuat untuk derivasi simbolis, verifikasi solusi analitis, eksplorasi parameter, dan visualisasi. Penggunaannya mempercepat pemahaman dan memungkinkan analisis sistem yang lebih kompleks daripada yang praktis dilakukan secara manual, menjembatani kesenjangan antara teori abstrak dan perilaku sistem yang dapat diamati.

<!-- end list -->

```
```